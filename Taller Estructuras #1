Taller - Matías Herrera Vanegas
1. Cree una función recursiva que reciba un entero y retorne cuantos digitos de este numero son multiplos de 2 y de 4 (RESTRICCION "IGNORE EL 0")
C#

using System;

class Program
{
    //Funcion principal
    static int MultiplosDe2y4(int numero) {
        if(numero == 0)
            return 0;
    
    //Extrae el ultimo digito del numero
    int ultimoDigito = Math.Abs(numero) % 10;
    //Coge el numero sin el ultimo digito de derecha a izq
    int cantidadSinUltimoDigito =  MultiplosDe2y4(numero / 10);
    //Condicion para saber si cada digito es divisible entre 2 o 4
    if (ultimoDigito != 0 && ultimoDigito % 2 == 0 && ultimoDigito % 4 == 0)
    //Si se cumple se suma 1 (como un acumulador)
        return cantidadSinUltimoDigito + 1;
    //Si no, se retorna el 0  
    else 
        return cantidadSinUltimoDigito;
}
//Acá le pasamos los parametros
static void Main()
{
    int numero = 1234567890;
    int resultado = MultiplosDe2y4(numero);
    Console.WriteLine($"La cantidad de multiplos de 2 y 4 en el numero: {numero},ignorando el 0 es: {resultado}");
    }
}


2. Cree una función NO recursiva que invierta solo la mitad de un string

// Online C# Editor for free
// Write, Edit and Run your C# code using C# Online Compiler

using System;

class Program
{
    //Funcion principal
    static string MitadString(string frase) {
        int longitud = frase.Length;
        int mitad = longitud / 2;
        
        string primeraMitad = frase.Substring(0, mitad);
        string segundaMitad = frase.Substring(mitad);
        
        string resultado = primeraMitad + new string(segundaMitad.Reverse().ToArray());
        return resultado;
    }
    
    static void Main()
    {
        string frase = "abcdef";
        string resultado = MitadString(frase);
        Console.WriteLine(resultado);
    }
}    
    
3. Cree una función recursiva que calcule la sumatoria de todos los numeros impares de una matriz cuadrada (Sumar n-1/2 en una matriz cuadrada)

using System;

class Program 
{
    //Metodo que recibe matriz, fila y columna
    static int SumaImparesMatriz(int[,] matriz, int fila = 0, int columna = 0 ) {
        //Verifica si fila = al numero de filas, es para saber cuando se procesaron todas las filas
        if(fila == matriz.GetLength(0)) return 0;

        int valor = matriz[fila, columna];
        //Si es impar, a sumaparcial se le asigna el valor de "valor", sino toma el 0
        int sumaParcial = (valor % 2 != 0) ? valor : 0;
        //Mover a la sgte columna
        columna ++;
        //Verifica si se ha alcanzado el final de la fila, devuelve la cantidad de columnas
        if (columna == matriz.GetLength(1)) {
            columna = 0;
            //Se aumenta el valor de fila en 1
            fila++;

        }
        return sumaParcial + SumaImparesMatriz(matriz, fila, columna);

    }


    static void Main()
    {
    int[,] matriz = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
    int resultado = SumaImparesMatriz(matriz);
    Console.WriteLine("La sumatoria de los numeros impares en la matriz es: " + resultado);     
    }
}    


4. Cree una función recursiva que reciba una lista, un elemento y un indice y retorne si el elemento está en la lista dada y en el indice dado 

using System;
using System.Linq;

class Program 
{
    static bool BuscarNumeroEnIndice(List<object> lista, object elemento, int indice)
    {
        //Si el indice es negativo o es mayor que la lista
        if (indice < 0 || indice >= lista.Count)
        {
            return false;
        }

        // Verifica si el elemento en el índice dado coincide con el elemento buscado
        if (lista[indice].Equals(elemento))
        {
             return true;
        }

        return false; // Retorna false si el elemento no coincide con el índice dado
    }
        
    static void Main() 
    {
        //Instancias
        List<object> miLista = new List<object> {"A", 1, 3, 4, "Lista", 10, 5, "Hola", 2, "B" };
        int indiceInicial = 9;
        object elementoBuscado = "B";

        bool resultado = BuscarNumeroEnIndice(miLista, elementoBuscado, indiceInicial);

        if (resultado) // = True
        {
            Console.WriteLine($"El elemento {elementoBuscado} si está en el índice {indiceInicial} ");
        }
        else
        {
            Console.WriteLine($"El elemento {elementoBuscado} no está en el índice {indiceInicial} ");
        }
    }
}



5. Cree una función recursiva que reciba un string alfanumerico y que extraiga los dijitos del string y retorne el número formado por todos los digitos

using System;
using System.Linq;

class Program 
{
    static int ExtraerDigitos(string cadena)
    {   //Filtra los digitos usando la libreria de Linq, y convierte ese arreglo a entero
        string digitos = new string(cadena.Where(char.IsDigit).ToArray());
        return int.Parse(digitos);
    }
        
    static void Main() 
    {
        string cadenaAlfanumerica = "abc678def12";
        int resultado = ExtraerDigitos(cadenaAlfanumerica);
        Console.WriteLine($"El número formado por los dígitos es: {resultado}");
    }
}
